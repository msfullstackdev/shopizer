trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  AKTO_API_KEY: 'your_akto_api_key'
  API_URL: 'http://localhost:8080'

stages:
  - stage: Security_Scanning
    jobs:
      - job: Run_Shopizer_And_Scans
        displayName: 'Run Shopizer and Perform Security Scans'
        steps:
          - script: |
              docker pull shopizerecomm/shopizer:latest
              docker run -d -p 8080:8080 shopizerecomm/shopizer:latest
            displayName: 'Run Shopizer in Docker'

          - script: |
              echo "Waiting for Shopizer API to be ready..."
              for i in {1..30}; do
                if curl -s -o /dev/null -w "%{http_code}" $(API_URL) | grep -q "200"; then
                  echo "Shopizer API is up and running."
                  exit 0
                else
                  echo "Waiting for Shopizer API... ($i/30)"
                  sleep 10
                fi
              done
              echo "Shopizer API did not become ready in time."
              exit 1
            displayName: 'Wait for Shopizer API to be ready'

          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.x'
              addToPath: true

          - script: |
              pip install akto-cli
              echo "Akto CLI installed"
            displayName: 'Install Akto CLI'

          - script: |
              docker pull wallarm/gotestwaf
              echo "Wallarm WAF pulled"
            displayName: 'Pull Wallarm Docker Image'

          - script: |
              docker pull owasp/zap2docker-stable
              echo "ZAP Docker Image pulled"
            displayName: 'Pull ZAP Docker Image'

          # - script: |
          #     akto scan --api-key $(AKTO_API_KEY) --target $(API_URL) --output akto_results.json
          #   displayName: 'Run Akto Scan'

          - script: |
              docker run --rm -v $(System.DefaultWorkingDirectory):/data wallarm/gotestwaf:latest \
                --url $(API_URL) \
                --checks all \
                --report-path /data/wallarm_scan.json
            displayName: 'Run Wallarm Scan'

          - script: |
              docker run --rm -v $(System.DefaultWorkingDirectory):/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py \
                -t $(API_URL) -J zap_results.json
            displayName: 'Run ZAP Scan'

          - script: |
              python3 consolidate_results.py
            displayName: 'Consolidate Scan Results'

          # - task: PublishBuildArtifacts@1
          #   inputs:
          #     pathtoPublish: '$(System.DefaultWorkingDirectory)/akto_results.json'
          #     artifactName: 'AktoResults'

          - task: PublishBuildArtifacts@1
            inputs:
              pathtoPublish: '$(System.DefaultWorkingDirectory)/wallarm_scan.json'
              artifactName: 'WallarmResults'

          - task: PublishBuildArtifacts@1
            inputs:
              pathtoPublish: '$(System.DefaultWorkingDirectory)/zap_results.json'
              artifactName: 'ZapResults'

          - task: PublishBuildArtifacts@1
            inputs:
              pathtoPublish: '$(System.DefaultWorkingDirectory)/aggregated_results.json'
              artifactName: 'AggregatedResults'
