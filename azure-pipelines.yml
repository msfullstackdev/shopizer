trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  AKTO_API_KEY: 'your_akto_api_key'
  API_URL: 'http://localhost:8080'
  OPENAPI_URL: 'http://localhost:8080/v2/api-docs'  # Adjust if necessary

stages:
  - stage: Security_Scanning
    jobs:
      - job: Run_Shopizer_And_Scans
        timeoutInMinutes: 1200
        displayName: 'Run Shopizer and Perform Security Scans'
        steps:
          - checkout: none

          - script: |
              docker pull shopizerecomm/shopizer:latest
              docker run -d --name shopizer -p 8080:8080 shopizerecomm/shopizer:latest
            displayName: 'Run Shopizer in Docker'

          - script: |
              echo "Waiting for Shopizer API to be ready..."
              for i in {1..30}; do
                if curl -s -o /dev/null -w "%{http_code}" $(API_URL)/swagger-ui.html | grep -q "200"; then
                  echo "Shopizer API is up and running."
                  exit 0
                else
                  echo "Waiting for Shopizer API... ($i/30)"
                  sleep 10
                fi
              done
              echo "Shopizer API did not become ready in time."
              docker logs shopizer
              exit 1
            displayName: 'Wait for Shopizer API to be ready'

          - script: |
              curl -o openapi.json $(OPENAPI_URL)
              echo "Downloaded OpenAPI JSON"
            displayName: 'Download OpenAPI JSON'

          - script: |
              AUTH_ENDPOINT="api/v1/private/login"
              AUTH_RESPONSE=$(curl -s -X POST "$(API_URL)/$AUTH_ENDPOINT" -H "Content-Type: application/json" -d '{"username":"admin@shopizer.com", "password":"password"}')
              AUTH_TOKEN=$(echo $AUTH_RESPONSE | jq -r '.token')
              echo "Retrieved Auth Token: $AUTH_TOKEN"
              echo "##vso[task.setvariable variable=AUTH_TOKEN]$AUTH_TOKEN"
            displayName: 'Retrieve Auth Token from OpenAPI'
          
          - script: |
              docker run --rm -v $(System.DefaultWorkingDirectory):/zap/wrk/:rw -u zap ghcr.io/zaproxy/zaproxy:stable /bin/bash -c "
                zap.sh -daemon -port 8080 -host 0.0.0.0 -config api.disablekey=true &
                ZAP_PID=\$!
                zap-cli --zap-url http://localhost --zap-port 8080 install-plugin openapi
                zap-cli --zap-url http://localhost --zap-port 8080 status -t 60
                zap-api-scan.py -t $(API_URL) -f openapi -O /zap/wrk/openapi.json -r zap_report.html -J zap_results.json -z \"-config replacer.full_list(0).matchtype=REQ_HEADER -config replacer.full_list(0).matchstr=Authorization -config replacer.full_list(0).regex=false -config replacer.full_list(0).replacement=Bearer $(AUTH_TOKEN)\"
                kill \$ZAP_PID
              "
            displayName: 'Install OpenAPI Plugin and Run ZAP API Scan with Auth'
          
          - task: PublishBuildArtifacts@1
            inputs:
              pathtoPublish: '$(System.DefaultWorkingDirectory)/zap_results.json'
              artifactName: 'ZapResults'
          
          - task: PublishBuildArtifacts@1
            inputs:
              pathtoPublish: '$(System.DefaultWorkingDirectory)/zap_report.html'
              artifactName: 'ZapHtmlReport'
          
          # - script: |
          #     docker run --rm -v $(System.DefaultWorkingDirectory):/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy:stable zap-api-scan.py \
          #       -t $(API_URL) \
          #       -f openapi \
          #       -O /zap/wrk/openapi.json \
          #       -r zap_report.html \
          #       -J zap_results.json \
          #       -z "-config replacer.full_list(0).matchtype=REQ_HEADER \
          #           -config replacer.full_list(0).matchstr=Authorization \
          #           -config replacer.full_list(0).regex=false \
          #           -config replacer.full_list(0).replacement=Bearer $(AUTH_TOKEN)"
          #   displayName: 'Run ZAP API Scan with Auth'

          # - task: UsePythonVersion@0
          #   inputs:
          #     versionSpec: '3.x'
          #     addToPath: true

          # - script: |
          #     pip install akto-cli
          #     echo "Akto CLI installed"
          #   displayName: 'Install Akto CLI'

          # - script: |
          #     docker pull wallarm/gotestwaf
          #     echo "Wallarm WAF pulled"
          #   displayName: 'Pull Wallarm Docker Image'

          # - script: |
          #     docker pull ghcr.io/zaproxy/zaproxy:stable
          #     echo "ZAP Docker Image pulled"
          #   displayName: 'Pull ZAP Docker Image'

          # # - script: |
          # #     akto scan --api-key $(AKTO_API_KEY) --target $(API_URL) --output akto_results.json --auth-header "Authorization: Bearer $(AUTH_TOKEN)"
          # #   displayName: 'Run Akto Scan with Auth'

          # # - script: |
          # #     docker run --rm -v $(System.DefaultWorkingDirectory):/data wallarm/gotestwaf:latest \
          # #       --url $(API_URL) \
          # #       --openapiFile /data/openapi.json \
          # #       --reportFormat json \
          # #       --reportPath /data \
          # #       --reportName wallarm_scan.json \
          # #       --passStatusCodes 200,404 \
          # #       --noEmailReport \
          # #       --includePayloads true \
          # #       --headers "Authorization: Bearer $(AUTH_TOKEN)"
          # #   displayName: 'Run Wallarm Scan with OpenAPI and Auth'

          # - script: |
          #     docker run --rm -v $(System.DefaultWorkingDirectory):/zap/wrk/:rw -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
          #       -t $(API_URL) -J zap_results.json -z "-config replacer.full_list(0).matchtype=REQ_HEADER -config replacer.full_list(0).matchstr=Authorization -config replacer.full_list(0).regex=false -config replacer.full_list(0).replacement=Bearer $(AUTH_TOKEN)"
          #   displayName: 'Run ZAP Scan with Auth'

          # - script: |
          #     python3 consolidate_results.py
          #   displayName: 'Consolidate Scan Results'

          # # - task: PublishBuildArtifacts@1
          # #   inputs:
          # #     pathtoPublish: '$(System.DefaultWorkingDirectory)/akto_results.json'
          # #     artifactName: 'AktoResults'

          # - task: PublishBuildArtifacts@1
          #   inputs:
          #     pathtoPublish: '$(System.DefaultWorkingDirectory)/wallarm_scan.json'
          #     artifactName: 'WallarmResults'

          # - task: PublishBuildArtifacts@1
          #   inputs:
          #     pathtoPublish: '$(System.DefaultWorkingDirectory)/zap_results.json'
          #     artifactName: 'ZapResults'

          # - task: PublishBuildArtifacts@1
          #   inputs:
          #     pathtoPublish: '$(System.DefaultWorkingDirectory)/aggregated_results.json'
          #     artifactName: 'AggregatedResults'
